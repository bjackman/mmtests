#!/bin/bash
# This script installs fio and runs a fio job

###SHELLPACK preamble fio-bench 3.33
FIO_CMD_OPTIONS=

###SHELLPACK parseargBegin
###SHELLPACK parseargInstall
###SHELLPACK parseargParam --cmdline                FIO_CMD_OPTIONS
###SHELLPACK parseargParam --target_file	    FIO_TARGET_FILE
###SHELLPACK parseargParam --type		    FIO_TEST_TYPE
###SHELLPACK parseargParam --max_jobs		    FIO_MAX_JOBS
###SHELLPACK parseargParam --runtime		    FIO_RUNTIME
###SHELLPACK parseargParam --size		    FIO_SIZE
###SHELLPACK parseargParam --ioengine		    FIO_IOENGINE
###SHELLPACK parseargParam --direct		    FIO_DIRECT
###SHELLPACK parseargParam --iodepth		    FIO_IODEPTH
###SHELLPACK parseargParam --reusefiles		    FIO_REUSE_FILES
###SHELLPACK parseargEnd
###SHELLPACK monitor_hooks

# Check gcc version
GCC_VERSION=`gcc --version | head -1 | awk '{print $NF}'`
GCC_MAJOR=`echo $GCC_VERSION | awk -F . '{print $1}'`
GCC_MINOR=`echo $GCC_VERSION | awk -F . '{print $2}'`
FIO_MAJOR=`echo $VERSION | awk -F . '{print $1}'`

if [ $FIO_MAJOR -gt 2 -a $GCC_MAJOR -eq 4 -a $GCC_MINOR -lt 9 ]; then
	VERSION=2.99
	echo Forcing fio 2.99 due to old compiler
fi

cleanup() {
	if [ "$SHELLPACK_DATA" != "" ]; then
		rm -rf $SHELLPACK_DATA/*
	fi
}
trap cleanup EXIT

###SHELLPACK check_install_required fio-${VERSION}
###SHELLPACK init_complete

FIO_IO_PATTERNS="write read rw randread randwrite randrw"

# default values for scaling test
FIO_MAX_JOBS=${FIO_MAX_JOBS:-64}
FIO_RUNTIME=${FIO_RUNTIME:-15}
FIO_SIZE=${FIO_SIZE:-1G}
FIO_IOENGINE=${FIO_IOENGINE:-libaio}
FIO_DIRECT=${FIO_DIRECT:-1}
FIO_IODEPTH=${FIO_IODEPTH:-1}
FIO_REUSE_FILES=${FIO_REUSE_FILES:-no}

function remove_fio_files() {
	local logfile=$1 name=$2
	local d files

	for d in ${SHELLPACK_DATA_DIRS[*]}; do
		files=$(ls ${d}/${name}.*[0-9].[0-9]* 2>/dev/null)
		if [ $? -eq 0 ]; then
			files=$(ls ${d}/${name}.*[0-9].[0-9]*)
			rm ${files}
		fi
	done
}

run_fio() {
	echo fio $*
	./fio $*
}

function one_pass() {
	local logfile=$1
	local -n fio_params=$2

	if [ "${FIO_REUSE_FILES}" != "yes" ]; then
		remove_fio_files ${logfile} ${fio_pass["NAME"]}
	fi

	run_fio --directory=${DIRS} --name=${fio_params["NAME"]}	\
		--ioengine=${fio_params["IOENGINE"]}			\
		--rw=${fio_params["IO_PATTERNS"]}  			\
		--size=${fio_params["SIZE"]}				\
		--direct=${FIO_DIRECT} 					\
		--iodepth=${fio_params["IODEPTH"]} 			\
		--runtime=${fio_params["RUNTIME"]} 			\
		--numjobs=${fio_params["NJOBS"]} 			\
		--blocksize=${fio_params["BLOCK_SIZE"]} 		\
		--group_reporting --output-format=terse --terse-version=5 \
		| tee -a ${logfile} || die Failed to have fun with fio
}

function rand_read_write() {
	local rw size qd=$1 njobs=$2
	local logfile
	local -A fio_args

	fio_args["IODEPTH"]=$qd
	fio_args["NJOBS"]=$njobs

	# These are constants
	fio_args["NAME"]=fio-ssd
	fio_args["RUNTIME"]=30
	fio_args["BLOCK_SIZE"]=4k
	fio_params["IOENGINE"]=${FIO_IOENGINE}

	logfile=${LOGDIR_RESULTS}/fio-ssd-rand-jobs_${njobs}-qd_${qd}-bs_4k

	for rw in randread randwrite; do
		fio_args["IO_PATTERNS"]=$rw
		for size in 1G 2G 4G 8G 16G; do
			fio_args["SIZE"]=$size
			one_pass ${logfile} "fio_args"
		done
	done
}

function seq_write_read() {
	local rw size qd=$1
	local logfile
	local -A fio_args

	fio_args["IODEPTH"]=$qd

	# These are constants
	fio_args["NAME"]=fio-ssd
	fio_args["NJOBS"]=1
	fio_args["RUNTIME"]=10
	fio_args["BLOCK_SIZE"]=128k
	fio_params["IOENGINE"]= ${FIO_IOENGINE}

	logfile=${LOGDIR_RESULTS}/fio-ssd-seq-jobs_1-qd_${qd}-bs_128k

	for rw in write read; do
		fio_args["IO_PATTERNS"]=$rw
		for size in 8G 16G 32G; do
			fio_args["SIZE"]=$size
			one_pass ${logfile} "fio_args"
		done
	done
}

function scaling_test() {
	local rw
	local logfile i p_njobs=0
	local -A fio_args

	fio_args["IODEPTH"]=$FIO_IODEPTH
	fio_args["SIZE"]=$FIO_SIZE
	fio_args["RUNTIME"]=${FIO_RUNTIME}

	# These are constants
	fio_params["IOENGINE"]=${FIO_IOENGINE}
	fio_args["NAME"]=fio-scaling
	fio_args["BLOCK_SIZE"]=4k

	for rw in ${FIO_IO_PATTERNS}; do
		logfile=${LOGDIR_RESULTS}/fio-scaling-${rw}
		fio_args["IO_PATTERNS"]=$rw
		for i in $(seq 0 ${NUMCPUS}); do
			fio_args["NJOBS"]=$[2**${i}*${DIR_NR}]
			if [ fio_args["NJOBS"] -gt ${FIO_MAX_JOBS} ]; then
				break
			fi
			if [ fio_args["NJOBS"] -gt ${NUMCPUS} ]; then
				njobs=${NUMCPUS}
			fi
			if [ fio_args["NJOBS"] -eq ${p_njobs} ]; then
				break
			fi
			p_njobs=fio_args["NJOBS"]
			one_pass ${logfile} ${fio_args}
		done
	done
}

function jobfile_test () {
	local FIO_DEST_ARG

	if [ "$FIO_CMD_OPTIONS" == "" ]; then
		die "Missing required FIO_CMD_OPTIONS"
	fi
	if [ "$FIO_TARGET_FILE" != "" ]; then
		if [ "$TESTDISK_NOMOUNT" != "true" ] ; then
			die "FIO won't run I/O against a mounted disk"
		fi
		FIO_DEST_ARG="--filename=${FIO_TARGET_FILE}"

	else
		FIO_DEST_ARG="--directory=${SHELLPACK_DATA}"
	fi

	monitor_pre_hook $LOGDIR_RESULTS $SIZE

	./fio ${FIO_DEST_ARG} --minimal --write_lat_log $LOGDIR_RESULTS/fio  \
	      $FIO_CMD_OPTIONS 2>&1 | tee $LOGDIR_RESULTS/fio.log || \
		die "Failed to have fun with fio"

	rm -rf $SHELLPACK_DATA/*
	monitor_post_hook $LOGDIR_RESULTS $SIZE
}

# Historically, if no test type is defined, look for a FIO job file
[[ -z "$FIO_TEST_TYPE" ]] && FIO_TEST_TYPE=jobfile
case $FIO_TEST_TYPE in
scaling)
	DIR_NR=${#SHELLPACK_DATA_DIRS[*]}
	DIRS=`echo ${SHELLPACK_DATA_DIRS[*]} | tr " " ":"`
	monitor_pre_hook $LOGDIR_RESULTS $FIO_READWRITE
	scaling_test
	monitor_post_hook $LOGDIR_RESULTS $FIO_READWRITE
	;;
ssd)
	DIR_NR=${#SHELLPACK_DATA_DIRS[*]}
	DIRS=$(echo ${SHELLPACK_DATA_DIRS[*]} | tr " " ":")
	monitor_pre_hook ${LOGDIR_RESULTS}
	# 4k, QD  1, jobs 1 (randread, randwrite)
	rand_read_write 1 1
	# 4k, QD 32, jobs 4 (randread, randwrite)
	rand_read_write 32 4
	# 128k, QD 2, jobs 1
	seq_write_read 2
	# 128k, QD 4, jobs 1
	seq_write_read 4
	monitor_post_hook ${LOGDIR_RESULTS}
	;;
jobfile)
	jobfile_test
	;;
*)
	die Unrecognised test type $FIO_TEST_TYPE
	;;
esac

gzip $LOGDIR_RESULTS/fio*.log
exit $SHELLPACK_SUCCESS
